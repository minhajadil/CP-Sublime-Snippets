<snippet>
	<content><![CDATA[

// single source shortest path using dijkstra

const int N = 1e6+10 ;
const int INF = 1e9+7;
#define pii pair<int,int>
vector<int>dist(N,INF) ;
vector<bool>vis(N,false) ;
vector<pii> adj[N] ;


void dijkstra(int source)
{
    
    priority_queue<pii,vector<pii>,greater<pii>>pq;
    pq.push({0,source}) ;
    dist[source]=0 ;

    while(!pq.empty())
    {
        int cur = pq.top().second ;
        pq.pop() ;

        if(vis[cur]) continue ;

        vis[cur] = true ;

        for(auto child : adj[cur])
        {
            int cnode = child.first ;
            int cweight = child.second ;

            if(dist[cnode]>dist[cur]+cweight)
            {
                dist[cnode]= dist[cur]+cweight ;
                pq.push({dist[cnode],cnode}) ;
            }
        }
    }
}



int main()
{
    int n, m ;
    cin >> n >> m ;

    for(int i =0 ;i<m ;i++)
    {
        int u , v ,w  ; cin >> u >> v >> w ;
        adj[u].push_back({v,w}) ;
        adj[v].push_back({u,w}) ;
    }


    dijkstra(1) ;




}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>dijkstra</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
